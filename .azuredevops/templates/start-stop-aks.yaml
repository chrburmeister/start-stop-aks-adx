
parameters:
- name: worker_image
  default: 'ubuntu-20.04'
- name: aks_cluster_name
- name: aks_cluster_resource_group_name
- name: aks_cluster_action
  default: stop
  values:
    - 'stop'
    - 'start'
- name: azurerm_service_connection_name


stages:
- stage: start_stop_aks_cluster
  pool: 
    vmImage: ${{ parameters.worker_image }}
  jobs:
  - job: start_stop_aks_cluster
    steps:
      - checkout: none

      - task: AzureCLI@2
        displayName: 'start cluster'
        inputs:
          azureSubscription: ${{ parameters.azurerm_service_connection_name }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            if($env:aks_cluster_action -eq 'stop') {
              $expected_status = 'Stopped'
            } else {
              $expected_status = 'Running'
            }

            $cluster_status = az aks show --name "$env:aks_cluster_name" --resource-group "$env:aks_cluster_resource_group_name" | ConvertFrom-Json

            if($cluster_status.powerState.code -ne $expected_status) {
              Write-Output "performing action - $($env:aks_cluster_action) - on AKS cluster: $($env:aks_cluster_name) - resource group: $($env:aks_cluster_resource_group_name)"
              az aks "$env:aks_cluster_action" --name "$env:aks_cluster_name" --resource-group "$env:aks_cluster_resource_group_name"
            } else {
              Write-Output "AKS cluster: $($env:aks_cluster_name) - resource group: $($env:aks_cluster_resource_group_name) - is already in the expected state: $($expected_status)"
            }
        env:
          aks_cluster_name: ${{ parameters.aks_cluster_name }}
          aks_cluster_resource_group_name: ${{ parameters.aks_cluster_resource_group_name }}
          aks_cluster_action: ${{ parameters.aks_cluster_action }}
